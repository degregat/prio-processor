#!/usr/bin/env python3

"""A script for transforming prio pings into a format that can be processed by
the command line utility. Subsequent calls will be appended to each other to
build up batched ndjson documents.

The schema for the payload section is defined at the top-level for informational
purposes. The payload.prioData section is an array of prio-encoded data that
represent various batches and shards of batches.

This script will generate shares that are placed into the corresponding raw
folders of each server.

Usage:

    ./scripts/transform-ping <JSON> <OUTPUT_DIRECTORY>

Example:

    $ ./scripts/transform-ping data/2019-05-14_prio_manually_saved_ping.json working
    $ tree data working

    data
    └── 2019-05-14_prio_manually_saved_ping.json
    working
    ├── server_a
    │   └── raw
    │       ├── content.blocking_blocked_TESTONLY-0.ndjson
    │       ├── content.blocking_blocked_TESTONLY-1.ndjson
    │       ├── content.blocking_storage_access_api_exempt_TESTONLY-0.ndjson
    │       └── content.blocking_storage_access_api_exempt_TESTONLY-1.ndjson
    └── server_b
        └── raw
            ├── content.blocking_blocked_TESTONLY-0.ndjson
            ├── content.blocking_blocked_TESTONLY-1.ndjson
            ├── content.blocking_storage_access_api_exempt_TESTONLY-0.ndjson
            └── content.blocking_storage_access_api_exempt_TESTONLY-1.ndjson

    $ find data/test_pings/*.json -type file -exec ./scripts/transform-ping {} working \;

See: https://firefox-source-docs.mozilla.org/toolkit/components/telemetry/telemetry/data/prio-ping.html
"""

import binascii
import json
import sys
from pathlib import Path
from itertools import groupby
from uuid import uuid4
from base64 import b64encode
from typing import List, Tuple

schema = {
    "$schema": "http://json-schema.org/schema#",
    "type": "object",
    "properties": {
        "payload": {
            "type": "array",
            "items": {
                "type": "object",
                "properties": {
                    "encoding": {
                        "type": "string",
                        "description": "The batch-id for the shares",
                    },
                    "prio": {
                        "type": "object",
                        "properties": {
                            "a": {
                                "type": "string",
                                "description": "Shares for server A in base64",
                            },
                            "b": {
                                "type": "string",
                                "description": "Shares for server B in base64",
                            },
                        },
                    },
                },
            },
        }
    },
}


def process(ping) -> List[Tuple[str, str, List[str]]]:
    """Take a prio encoded ping and generate (batch_id, server_id, payload)
    tuples to write out to disk.

    Give each pair of shares a unique identifier, then group by the batch-id and
    server-id.
    """
    prio_data = ping["payload"]["prioData"]
    results = []
    keyfunc = lambda x: x["encoding"]
    prio_data.sort(key=keyfunc)
    for key, group in groupby(prio_data, keyfunc):
        data_a = []
        data_b = []
        for data in group:
            uid = str(uuid4())
            message = lambda x: json.dumps({"id": uid, "payload": x})
            data_a.append(message(data["prio"]["a"]))
            data_b.append(message(data["prio"]["b"]))
        results.append((key, "A", data_a))
        results.append((key, "B", data_b))
    return results


def write(data: List[Tuple[str, str, List[str]]], output: Path):
    """Write out the preprocessed tuples into ndjson files.

    ```bash
    cat data/2019-05-14_prio_manually_saved_ping.json \
        | jq -r '.payload.prioData | .[] | .encoding' \
        | sort | uniq

    content.blocking_blocked_TESTONLY-0
    content.blocking_blocked_TESTONLY-1
    content.blocking_storage_access_api_exempt_TESTONLY-0
    content.blocking_storage_access_api_exempt_TESTONLY-1
    ```
    """
    for batch_id, server_id, documents in data:
        # See `scripts/create-folder` for directory structure
        q = output / f"server_{server_id.lower()}" / "raw" / f"{batch_id}.ndjson"
        with q.open("a+") as f:
            for document in documents:
                f.write(document)
                f.write("\n")


def main():
    if len(sys.argv) < 3:
        print("Usage: transform-ping <JSON> <OUTPUT_DIRECTORY>")
        sys.exit()

    with open(sys.argv[1]) as f:
        ping = json.load(f)

    write(process(ping), Path(sys.argv[2]))


if __name__ == "__main__":
    main()
